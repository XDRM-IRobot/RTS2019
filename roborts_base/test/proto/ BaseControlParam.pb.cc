// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source:  BaseControlParam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include " BaseControlParam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_base {

namespace {

const ::google::protobuf::Descriptor* BaseControlParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseControlParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc__20BaseControlParam_2eproto() {
  protobuf_AddDesc__20BaseControlParam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      " BaseControlParam.proto");
  GOOGLE_CHECK(file != NULL);
  BaseControlParam_descriptor_ = file->message_type(0);
  static const int BaseControlParam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseControlParam, shoot_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseControlParam, shoot_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseControlParam, gimbal_yaw_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseControlParam, gimbal_pitch_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseControlParam, gimbal_control_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseControlParam, gimbal_control_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseControlParam, fric_wheel_open_),
  };
  BaseControlParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseControlParam_descriptor_,
      BaseControlParam::default_instance_,
      BaseControlParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseControlParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseControlParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseControlParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc__20BaseControlParam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseControlParam_descriptor_, &BaseControlParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile__20BaseControlParam_2eproto() {
  delete BaseControlParam::default_instance_;
  delete BaseControlParam_reflection_;
}

void protobuf_AddDesc__20BaseControlParam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027 BaseControlParam.proto\022\014roborts_base\""
    "\304\001\n\020BaseControlParam\022\022\n\nshoot_mode\030\001 \002(\005"
    "\022\024\n\014shoot_number\030\002 \002(\005\022\027\n\017gimbal_yaw_mod"
    "e\030\003 \002(\005\022\031\n\021gimbal_pitch_mode\030\004 \002(\005\022\033\n\023gi"
    "mbal_control_freq\030\005 \002(\005\022\034\n\024gimbal_contro"
    "l_range\030\006 \002(\002\022\027\n\017fric_wheel_open\030\007 \002(\005", 238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    " BaseControlParam.proto", &protobuf_RegisterTypes);
  BaseControlParam::default_instance_ = new BaseControlParam();
  BaseControlParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile__20BaseControlParam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer__20BaseControlParam_2eproto {
  StaticDescriptorInitializer__20BaseControlParam_2eproto() {
    protobuf_AddDesc__20BaseControlParam_2eproto();
  }
} static_descriptor_initializer__20BaseControlParam_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BaseControlParam::kShootModeFieldNumber;
const int BaseControlParam::kShootNumberFieldNumber;
const int BaseControlParam::kGimbalYawModeFieldNumber;
const int BaseControlParam::kGimbalPitchModeFieldNumber;
const int BaseControlParam::kGimbalControlFreqFieldNumber;
const int BaseControlParam::kGimbalControlRangeFieldNumber;
const int BaseControlParam::kFricWheelOpenFieldNumber;
#endif  // !_MSC_VER

BaseControlParam::BaseControlParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_base.BaseControlParam)
}

void BaseControlParam::InitAsDefaultInstance() {
}

BaseControlParam::BaseControlParam(const BaseControlParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_base.BaseControlParam)
}

void BaseControlParam::SharedCtor() {
  _cached_size_ = 0;
  shoot_mode_ = 0;
  shoot_number_ = 0;
  gimbal_yaw_mode_ = 0;
  gimbal_pitch_mode_ = 0;
  gimbal_control_freq_ = 0;
  gimbal_control_range_ = 0;
  fric_wheel_open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseControlParam::~BaseControlParam() {
  // @@protoc_insertion_point(destructor:roborts_base.BaseControlParam)
  SharedDtor();
}

void BaseControlParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseControlParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseControlParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseControlParam_descriptor_;
}

const BaseControlParam& BaseControlParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc__20BaseControlParam_2eproto();
  return *default_instance_;
}

BaseControlParam* BaseControlParam::default_instance_ = NULL;

BaseControlParam* BaseControlParam::New() const {
  return new BaseControlParam;
}

void BaseControlParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BaseControlParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(shoot_mode_, fric_wheel_open_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseControlParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_base.BaseControlParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 shoot_mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoot_mode_)));
          set_has_shoot_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shoot_number;
        break;
      }

      // required int32 shoot_number = 2;
      case 2: {
        if (tag == 16) {
         parse_shoot_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoot_number_)));
          set_has_shoot_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gimbal_yaw_mode;
        break;
      }

      // required int32 gimbal_yaw_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_gimbal_yaw_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gimbal_yaw_mode_)));
          set_has_gimbal_yaw_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gimbal_pitch_mode;
        break;
      }

      // required int32 gimbal_pitch_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_gimbal_pitch_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gimbal_pitch_mode_)));
          set_has_gimbal_pitch_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gimbal_control_freq;
        break;
      }

      // required int32 gimbal_control_freq = 5;
      case 5: {
        if (tag == 40) {
         parse_gimbal_control_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gimbal_control_freq_)));
          set_has_gimbal_control_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_gimbal_control_range;
        break;
      }

      // required float gimbal_control_range = 6;
      case 6: {
        if (tag == 53) {
         parse_gimbal_control_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gimbal_control_range_)));
          set_has_gimbal_control_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fric_wheel_open;
        break;
      }

      // required int32 fric_wheel_open = 7;
      case 7: {
        if (tag == 56) {
         parse_fric_wheel_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fric_wheel_open_)));
          set_has_fric_wheel_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_base.BaseControlParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_base.BaseControlParam)
  return false;
#undef DO_
}

void BaseControlParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_base.BaseControlParam)
  // required int32 shoot_mode = 1;
  if (has_shoot_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shoot_mode(), output);
  }

  // required int32 shoot_number = 2;
  if (has_shoot_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shoot_number(), output);
  }

  // required int32 gimbal_yaw_mode = 3;
  if (has_gimbal_yaw_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gimbal_yaw_mode(), output);
  }

  // required int32 gimbal_pitch_mode = 4;
  if (has_gimbal_pitch_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gimbal_pitch_mode(), output);
  }

  // required int32 gimbal_control_freq = 5;
  if (has_gimbal_control_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gimbal_control_freq(), output);
  }

  // required float gimbal_control_range = 6;
  if (has_gimbal_control_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gimbal_control_range(), output);
  }

  // required int32 fric_wheel_open = 7;
  if (has_fric_wheel_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fric_wheel_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_base.BaseControlParam)
}

::google::protobuf::uint8* BaseControlParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_base.BaseControlParam)
  // required int32 shoot_mode = 1;
  if (has_shoot_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shoot_mode(), target);
  }

  // required int32 shoot_number = 2;
  if (has_shoot_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shoot_number(), target);
  }

  // required int32 gimbal_yaw_mode = 3;
  if (has_gimbal_yaw_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gimbal_yaw_mode(), target);
  }

  // required int32 gimbal_pitch_mode = 4;
  if (has_gimbal_pitch_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gimbal_pitch_mode(), target);
  }

  // required int32 gimbal_control_freq = 5;
  if (has_gimbal_control_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gimbal_control_freq(), target);
  }

  // required float gimbal_control_range = 6;
  if (has_gimbal_control_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gimbal_control_range(), target);
  }

  // required int32 fric_wheel_open = 7;
  if (has_fric_wheel_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fric_wheel_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_base.BaseControlParam)
  return target;
}

int BaseControlParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 shoot_mode = 1;
    if (has_shoot_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoot_mode());
    }

    // required int32 shoot_number = 2;
    if (has_shoot_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoot_number());
    }

    // required int32 gimbal_yaw_mode = 3;
    if (has_gimbal_yaw_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gimbal_yaw_mode());
    }

    // required int32 gimbal_pitch_mode = 4;
    if (has_gimbal_pitch_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gimbal_pitch_mode());
    }

    // required int32 gimbal_control_freq = 5;
    if (has_gimbal_control_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gimbal_control_freq());
    }

    // required float gimbal_control_range = 6;
    if (has_gimbal_control_range()) {
      total_size += 1 + 4;
    }

    // required int32 fric_wheel_open = 7;
    if (has_fric_wheel_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fric_wheel_open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseControlParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseControlParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseControlParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseControlParam::MergeFrom(const BaseControlParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shoot_mode()) {
      set_shoot_mode(from.shoot_mode());
    }
    if (from.has_shoot_number()) {
      set_shoot_number(from.shoot_number());
    }
    if (from.has_gimbal_yaw_mode()) {
      set_gimbal_yaw_mode(from.gimbal_yaw_mode());
    }
    if (from.has_gimbal_pitch_mode()) {
      set_gimbal_pitch_mode(from.gimbal_pitch_mode());
    }
    if (from.has_gimbal_control_freq()) {
      set_gimbal_control_freq(from.gimbal_control_freq());
    }
    if (from.has_gimbal_control_range()) {
      set_gimbal_control_range(from.gimbal_control_range());
    }
    if (from.has_fric_wheel_open()) {
      set_fric_wheel_open(from.fric_wheel_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseControlParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseControlParam::CopyFrom(const BaseControlParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseControlParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void BaseControlParam::Swap(BaseControlParam* other) {
  if (other != this) {
    std::swap(shoot_mode_, other->shoot_mode_);
    std::swap(shoot_number_, other->shoot_number_);
    std::swap(gimbal_yaw_mode_, other->gimbal_yaw_mode_);
    std::swap(gimbal_pitch_mode_, other->gimbal_pitch_mode_);
    std::swap(gimbal_control_freq_, other->gimbal_control_freq_);
    std::swap(gimbal_control_range_, other->gimbal_control_range_);
    std::swap(fric_wheel_open_, other->fric_wheel_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseControlParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseControlParam_descriptor_;
  metadata.reflection = BaseControlParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_base

// @@protoc_insertion_point(global_scope)
