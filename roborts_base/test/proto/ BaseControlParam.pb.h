// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source:  BaseControlParam.proto

#ifndef PROTOBUF__20BaseControlParam_2eproto__INCLUDED
#define PROTOBUF__20BaseControlParam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace roborts_base {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc__20BaseControlParam_2eproto();
void protobuf_AssignDesc__20BaseControlParam_2eproto();
void protobuf_ShutdownFile__20BaseControlParam_2eproto();

class BaseControlParam;

// ===================================================================

class BaseControlParam : public ::google::protobuf::Message {
 public:
  BaseControlParam();
  virtual ~BaseControlParam();

  BaseControlParam(const BaseControlParam& from);

  inline BaseControlParam& operator=(const BaseControlParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseControlParam& default_instance();

  void Swap(BaseControlParam* other);

  // implements Message ----------------------------------------------

  BaseControlParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseControlParam& from);
  void MergeFrom(const BaseControlParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 shoot_mode = 1;
  inline bool has_shoot_mode() const;
  inline void clear_shoot_mode();
  static const int kShootModeFieldNumber = 1;
  inline ::google::protobuf::int32 shoot_mode() const;
  inline void set_shoot_mode(::google::protobuf::int32 value);

  // required int32 shoot_number = 2;
  inline bool has_shoot_number() const;
  inline void clear_shoot_number();
  static const int kShootNumberFieldNumber = 2;
  inline ::google::protobuf::int32 shoot_number() const;
  inline void set_shoot_number(::google::protobuf::int32 value);

  // required int32 gimbal_yaw_mode = 3;
  inline bool has_gimbal_yaw_mode() const;
  inline void clear_gimbal_yaw_mode();
  static const int kGimbalYawModeFieldNumber = 3;
  inline ::google::protobuf::int32 gimbal_yaw_mode() const;
  inline void set_gimbal_yaw_mode(::google::protobuf::int32 value);

  // required int32 gimbal_pitch_mode = 4;
  inline bool has_gimbal_pitch_mode() const;
  inline void clear_gimbal_pitch_mode();
  static const int kGimbalPitchModeFieldNumber = 4;
  inline ::google::protobuf::int32 gimbal_pitch_mode() const;
  inline void set_gimbal_pitch_mode(::google::protobuf::int32 value);

  // required int32 gimbal_control_freq = 5;
  inline bool has_gimbal_control_freq() const;
  inline void clear_gimbal_control_freq();
  static const int kGimbalControlFreqFieldNumber = 5;
  inline ::google::protobuf::int32 gimbal_control_freq() const;
  inline void set_gimbal_control_freq(::google::protobuf::int32 value);

  // required float gimbal_control_range = 6;
  inline bool has_gimbal_control_range() const;
  inline void clear_gimbal_control_range();
  static const int kGimbalControlRangeFieldNumber = 6;
  inline float gimbal_control_range() const;
  inline void set_gimbal_control_range(float value);

  // required int32 fric_wheel_open = 7;
  inline bool has_fric_wheel_open() const;
  inline void clear_fric_wheel_open();
  static const int kFricWheelOpenFieldNumber = 7;
  inline ::google::protobuf::int32 fric_wheel_open() const;
  inline void set_fric_wheel_open(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:roborts_base.BaseControlParam)
 private:
  inline void set_has_shoot_mode();
  inline void clear_has_shoot_mode();
  inline void set_has_shoot_number();
  inline void clear_has_shoot_number();
  inline void set_has_gimbal_yaw_mode();
  inline void clear_has_gimbal_yaw_mode();
  inline void set_has_gimbal_pitch_mode();
  inline void clear_has_gimbal_pitch_mode();
  inline void set_has_gimbal_control_freq();
  inline void clear_has_gimbal_control_freq();
  inline void set_has_gimbal_control_range();
  inline void clear_has_gimbal_control_range();
  inline void set_has_fric_wheel_open();
  inline void clear_has_fric_wheel_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 shoot_mode_;
  ::google::protobuf::int32 shoot_number_;
  ::google::protobuf::int32 gimbal_yaw_mode_;
  ::google::protobuf::int32 gimbal_pitch_mode_;
  ::google::protobuf::int32 gimbal_control_freq_;
  float gimbal_control_range_;
  ::google::protobuf::int32 fric_wheel_open_;
  friend void  protobuf_AddDesc__20BaseControlParam_2eproto();
  friend void protobuf_AssignDesc__20BaseControlParam_2eproto();
  friend void protobuf_ShutdownFile__20BaseControlParam_2eproto();

  void InitAsDefaultInstance();
  static BaseControlParam* default_instance_;
};
// ===================================================================


// ===================================================================

// BaseControlParam

// required int32 shoot_mode = 1;
inline bool BaseControlParam::has_shoot_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseControlParam::set_has_shoot_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseControlParam::clear_has_shoot_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseControlParam::clear_shoot_mode() {
  shoot_mode_ = 0;
  clear_has_shoot_mode();
}
inline ::google::protobuf::int32 BaseControlParam::shoot_mode() const {
  // @@protoc_insertion_point(field_get:roborts_base.BaseControlParam.shoot_mode)
  return shoot_mode_;
}
inline void BaseControlParam::set_shoot_mode(::google::protobuf::int32 value) {
  set_has_shoot_mode();
  shoot_mode_ = value;
  // @@protoc_insertion_point(field_set:roborts_base.BaseControlParam.shoot_mode)
}

// required int32 shoot_number = 2;
inline bool BaseControlParam::has_shoot_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseControlParam::set_has_shoot_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseControlParam::clear_has_shoot_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseControlParam::clear_shoot_number() {
  shoot_number_ = 0;
  clear_has_shoot_number();
}
inline ::google::protobuf::int32 BaseControlParam::shoot_number() const {
  // @@protoc_insertion_point(field_get:roborts_base.BaseControlParam.shoot_number)
  return shoot_number_;
}
inline void BaseControlParam::set_shoot_number(::google::protobuf::int32 value) {
  set_has_shoot_number();
  shoot_number_ = value;
  // @@protoc_insertion_point(field_set:roborts_base.BaseControlParam.shoot_number)
}

// required int32 gimbal_yaw_mode = 3;
inline bool BaseControlParam::has_gimbal_yaw_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseControlParam::set_has_gimbal_yaw_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseControlParam::clear_has_gimbal_yaw_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseControlParam::clear_gimbal_yaw_mode() {
  gimbal_yaw_mode_ = 0;
  clear_has_gimbal_yaw_mode();
}
inline ::google::protobuf::int32 BaseControlParam::gimbal_yaw_mode() const {
  // @@protoc_insertion_point(field_get:roborts_base.BaseControlParam.gimbal_yaw_mode)
  return gimbal_yaw_mode_;
}
inline void BaseControlParam::set_gimbal_yaw_mode(::google::protobuf::int32 value) {
  set_has_gimbal_yaw_mode();
  gimbal_yaw_mode_ = value;
  // @@protoc_insertion_point(field_set:roborts_base.BaseControlParam.gimbal_yaw_mode)
}

// required int32 gimbal_pitch_mode = 4;
inline bool BaseControlParam::has_gimbal_pitch_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseControlParam::set_has_gimbal_pitch_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseControlParam::clear_has_gimbal_pitch_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseControlParam::clear_gimbal_pitch_mode() {
  gimbal_pitch_mode_ = 0;
  clear_has_gimbal_pitch_mode();
}
inline ::google::protobuf::int32 BaseControlParam::gimbal_pitch_mode() const {
  // @@protoc_insertion_point(field_get:roborts_base.BaseControlParam.gimbal_pitch_mode)
  return gimbal_pitch_mode_;
}
inline void BaseControlParam::set_gimbal_pitch_mode(::google::protobuf::int32 value) {
  set_has_gimbal_pitch_mode();
  gimbal_pitch_mode_ = value;
  // @@protoc_insertion_point(field_set:roborts_base.BaseControlParam.gimbal_pitch_mode)
}

// required int32 gimbal_control_freq = 5;
inline bool BaseControlParam::has_gimbal_control_freq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseControlParam::set_has_gimbal_control_freq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseControlParam::clear_has_gimbal_control_freq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseControlParam::clear_gimbal_control_freq() {
  gimbal_control_freq_ = 0;
  clear_has_gimbal_control_freq();
}
inline ::google::protobuf::int32 BaseControlParam::gimbal_control_freq() const {
  // @@protoc_insertion_point(field_get:roborts_base.BaseControlParam.gimbal_control_freq)
  return gimbal_control_freq_;
}
inline void BaseControlParam::set_gimbal_control_freq(::google::protobuf::int32 value) {
  set_has_gimbal_control_freq();
  gimbal_control_freq_ = value;
  // @@protoc_insertion_point(field_set:roborts_base.BaseControlParam.gimbal_control_freq)
}

// required float gimbal_control_range = 6;
inline bool BaseControlParam::has_gimbal_control_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseControlParam::set_has_gimbal_control_range() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseControlParam::clear_has_gimbal_control_range() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseControlParam::clear_gimbal_control_range() {
  gimbal_control_range_ = 0;
  clear_has_gimbal_control_range();
}
inline float BaseControlParam::gimbal_control_range() const {
  // @@protoc_insertion_point(field_get:roborts_base.BaseControlParam.gimbal_control_range)
  return gimbal_control_range_;
}
inline void BaseControlParam::set_gimbal_control_range(float value) {
  set_has_gimbal_control_range();
  gimbal_control_range_ = value;
  // @@protoc_insertion_point(field_set:roborts_base.BaseControlParam.gimbal_control_range)
}

// required int32 fric_wheel_open = 7;
inline bool BaseControlParam::has_fric_wheel_open() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BaseControlParam::set_has_fric_wheel_open() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BaseControlParam::clear_has_fric_wheel_open() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BaseControlParam::clear_fric_wheel_open() {
  fric_wheel_open_ = 0;
  clear_has_fric_wheel_open();
}
inline ::google::protobuf::int32 BaseControlParam::fric_wheel_open() const {
  // @@protoc_insertion_point(field_get:roborts_base.BaseControlParam.fric_wheel_open)
  return fric_wheel_open_;
}
inline void BaseControlParam::set_fric_wheel_open(::google::protobuf::int32 value) {
  set_has_fric_wheel_open();
  fric_wheel_open_ = value;
  // @@protoc_insertion_point(field_set:roborts_base.BaseControlParam.fric_wheel_open)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_base

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF__20BaseControlParam_2eproto__INCLUDED
