// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gimbal_control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gimbal_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

namespace {

const ::google::protobuf::Descriptor* GimbalControlParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GimbalControlParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gimbal_5fcontrol_2eproto() {
  protobuf_AddDesc_gimbal_5fcontrol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gimbal_control.proto");
  GOOGLE_CHECK(file != NULL);
  GimbalControlParam_descriptor_ = file->message_type(0);
  static const int GimbalControlParam_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, offset_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, offset_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, offset_yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, offset_pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, init_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, init_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, fric_wheel_),
  };
  GimbalControlParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GimbalControlParam_descriptor_,
      GimbalControlParam::default_instance_,
      GimbalControlParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GimbalControlParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GimbalControlParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gimbal_5fcontrol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GimbalControlParam_descriptor_, &GimbalControlParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gimbal_5fcontrol_2eproto() {
  delete GimbalControlParam::default_instance_;
  delete GimbalControlParam_reflection_;
}

void protobuf_AddDesc_gimbal_5fcontrol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024gimbal_control.proto\022\020roborts_decision"
    "\"\250\001\n\022GimbalControlParam\022\020\n\010offset_x\030\001 \002("
    "\002\022\020\n\010offset_y\030\002 \002(\002\022\020\n\010offset_z\030\003 \002(\002\022\022\n"
    "\noffset_yaw\030\004 \002(\002\022\024\n\014offset_pitch\030\005 \002(\002\022"
    "\016\n\006init_v\030\006 \002(\002\022\016\n\006init_k\030\007 \002(\002\022\022\n\nfric_"
    "wheel\030\010 \002(\010", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gimbal_control.proto", &protobuf_RegisterTypes);
  GimbalControlParam::default_instance_ = new GimbalControlParam();
  GimbalControlParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gimbal_5fcontrol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gimbal_5fcontrol_2eproto {
  StaticDescriptorInitializer_gimbal_5fcontrol_2eproto() {
    protobuf_AddDesc_gimbal_5fcontrol_2eproto();
  }
} static_descriptor_initializer_gimbal_5fcontrol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GimbalControlParam::kOffsetXFieldNumber;
const int GimbalControlParam::kOffsetYFieldNumber;
const int GimbalControlParam::kOffsetZFieldNumber;
const int GimbalControlParam::kOffsetYawFieldNumber;
const int GimbalControlParam::kOffsetPitchFieldNumber;
const int GimbalControlParam::kInitVFieldNumber;
const int GimbalControlParam::kInitKFieldNumber;
const int GimbalControlParam::kFricWheelFieldNumber;
#endif  // !_MSC_VER

GimbalControlParam::GimbalControlParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.GimbalControlParam)
}

void GimbalControlParam::InitAsDefaultInstance() {
}

GimbalControlParam::GimbalControlParam(const GimbalControlParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.GimbalControlParam)
}

void GimbalControlParam::SharedCtor() {
  _cached_size_ = 0;
  offset_x_ = 0;
  offset_y_ = 0;
  offset_z_ = 0;
  offset_yaw_ = 0;
  offset_pitch_ = 0;
  init_v_ = 0;
  init_k_ = 0;
  fric_wheel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GimbalControlParam::~GimbalControlParam() {
  // @@protoc_insertion_point(destructor:roborts_decision.GimbalControlParam)
  SharedDtor();
}

void GimbalControlParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GimbalControlParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GimbalControlParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GimbalControlParam_descriptor_;
}

const GimbalControlParam& GimbalControlParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gimbal_5fcontrol_2eproto();
  return *default_instance_;
}

GimbalControlParam* GimbalControlParam::default_instance_ = NULL;

GimbalControlParam* GimbalControlParam::New() const {
  return new GimbalControlParam;
}

void GimbalControlParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GimbalControlParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(offset_x_, fric_wheel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GimbalControlParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.GimbalControlParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float offset_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_x_)));
          set_has_offset_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_offset_y;
        break;
      }

      // required float offset_y = 2;
      case 2: {
        if (tag == 21) {
         parse_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_y_)));
          set_has_offset_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_offset_z;
        break;
      }

      // required float offset_z = 3;
      case 3: {
        if (tag == 29) {
         parse_offset_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_z_)));
          set_has_offset_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_offset_yaw;
        break;
      }

      // required float offset_yaw = 4;
      case 4: {
        if (tag == 37) {
         parse_offset_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_yaw_)));
          set_has_offset_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_offset_pitch;
        break;
      }

      // required float offset_pitch = 5;
      case 5: {
        if (tag == 45) {
         parse_offset_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_pitch_)));
          set_has_offset_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_init_v;
        break;
      }

      // required float init_v = 6;
      case 6: {
        if (tag == 53) {
         parse_init_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_v_)));
          set_has_init_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_init_k;
        break;
      }

      // required float init_k = 7;
      case 7: {
        if (tag == 61) {
         parse_init_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_k_)));
          set_has_init_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fric_wheel;
        break;
      }

      // required bool fric_wheel = 8;
      case 8: {
        if (tag == 64) {
         parse_fric_wheel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fric_wheel_)));
          set_has_fric_wheel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.GimbalControlParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.GimbalControlParam)
  return false;
#undef DO_
}

void GimbalControlParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.GimbalControlParam)
  // required float offset_x = 1;
  if (has_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset_x(), output);
  }

  // required float offset_y = 2;
  if (has_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->offset_y(), output);
  }

  // required float offset_z = 3;
  if (has_offset_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offset_z(), output);
  }

  // required float offset_yaw = 4;
  if (has_offset_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offset_yaw(), output);
  }

  // required float offset_pitch = 5;
  if (has_offset_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offset_pitch(), output);
  }

  // required float init_v = 6;
  if (has_init_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->init_v(), output);
  }

  // required float init_k = 7;
  if (has_init_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->init_k(), output);
  }

  // required bool fric_wheel = 8;
  if (has_fric_wheel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fric_wheel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.GimbalControlParam)
}

::google::protobuf::uint8* GimbalControlParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.GimbalControlParam)
  // required float offset_x = 1;
  if (has_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->offset_x(), target);
  }

  // required float offset_y = 2;
  if (has_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->offset_y(), target);
  }

  // required float offset_z = 3;
  if (has_offset_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->offset_z(), target);
  }

  // required float offset_yaw = 4;
  if (has_offset_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offset_yaw(), target);
  }

  // required float offset_pitch = 5;
  if (has_offset_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->offset_pitch(), target);
  }

  // required float init_v = 6;
  if (has_init_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->init_v(), target);
  }

  // required float init_k = 7;
  if (has_init_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->init_k(), target);
  }

  // required bool fric_wheel = 8;
  if (has_fric_wheel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fric_wheel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.GimbalControlParam)
  return target;
}

int GimbalControlParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float offset_x = 1;
    if (has_offset_x()) {
      total_size += 1 + 4;
    }

    // required float offset_y = 2;
    if (has_offset_y()) {
      total_size += 1 + 4;
    }

    // required float offset_z = 3;
    if (has_offset_z()) {
      total_size += 1 + 4;
    }

    // required float offset_yaw = 4;
    if (has_offset_yaw()) {
      total_size += 1 + 4;
    }

    // required float offset_pitch = 5;
    if (has_offset_pitch()) {
      total_size += 1 + 4;
    }

    // required float init_v = 6;
    if (has_init_v()) {
      total_size += 1 + 4;
    }

    // required float init_k = 7;
    if (has_init_k()) {
      total_size += 1 + 4;
    }

    // required bool fric_wheel = 8;
    if (has_fric_wheel()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GimbalControlParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GimbalControlParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GimbalControlParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GimbalControlParam::MergeFrom(const GimbalControlParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset_x()) {
      set_offset_x(from.offset_x());
    }
    if (from.has_offset_y()) {
      set_offset_y(from.offset_y());
    }
    if (from.has_offset_z()) {
      set_offset_z(from.offset_z());
    }
    if (from.has_offset_yaw()) {
      set_offset_yaw(from.offset_yaw());
    }
    if (from.has_offset_pitch()) {
      set_offset_pitch(from.offset_pitch());
    }
    if (from.has_init_v()) {
      set_init_v(from.init_v());
    }
    if (from.has_init_k()) {
      set_init_k(from.init_k());
    }
    if (from.has_fric_wheel()) {
      set_fric_wheel(from.fric_wheel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GimbalControlParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GimbalControlParam::CopyFrom(const GimbalControlParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GimbalControlParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void GimbalControlParam::Swap(GimbalControlParam* other) {
  if (other != this) {
    std::swap(offset_x_, other->offset_x_);
    std::swap(offset_y_, other->offset_y_);
    std::swap(offset_z_, other->offset_z_);
    std::swap(offset_yaw_, other->offset_yaw_);
    std::swap(offset_pitch_, other->offset_pitch_);
    std::swap(init_v_, other->init_v_);
    std::swap(init_k_, other->init_k_);
    std::swap(fric_wheel_, other->fric_wheel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GimbalControlParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GimbalControlParam_descriptor_;
  metadata.reflection = GimbalControlParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

// @@protoc_insertion_point(global_scope)
