// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gimbal_control.proto

#ifndef PROTOBUF_gimbal_5fcontrol_2eproto__INCLUDED
#define PROTOBUF_gimbal_5fcontrol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gimbal_5fcontrol_2eproto();
void protobuf_AssignDesc_gimbal_5fcontrol_2eproto();
void protobuf_ShutdownFile_gimbal_5fcontrol_2eproto();

class GimbalControlParam;

// ===================================================================

class GimbalControlParam : public ::google::protobuf::Message {
 public:
  GimbalControlParam();
  virtual ~GimbalControlParam();

  GimbalControlParam(const GimbalControlParam& from);

  inline GimbalControlParam& operator=(const GimbalControlParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GimbalControlParam& default_instance();

  void Swap(GimbalControlParam* other);

  // implements Message ----------------------------------------------

  GimbalControlParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GimbalControlParam& from);
  void MergeFrom(const GimbalControlParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float offset_x = 1;
  inline bool has_offset_x() const;
  inline void clear_offset_x();
  static const int kOffsetXFieldNumber = 1;
  inline float offset_x() const;
  inline void set_offset_x(float value);

  // required float offset_y = 2;
  inline bool has_offset_y() const;
  inline void clear_offset_y();
  static const int kOffsetYFieldNumber = 2;
  inline float offset_y() const;
  inline void set_offset_y(float value);

  // required float offset_z = 3;
  inline bool has_offset_z() const;
  inline void clear_offset_z();
  static const int kOffsetZFieldNumber = 3;
  inline float offset_z() const;
  inline void set_offset_z(float value);

  // required float offset_yaw = 4;
  inline bool has_offset_yaw() const;
  inline void clear_offset_yaw();
  static const int kOffsetYawFieldNumber = 4;
  inline float offset_yaw() const;
  inline void set_offset_yaw(float value);

  // required float offset_pitch = 5;
  inline bool has_offset_pitch() const;
  inline void clear_offset_pitch();
  static const int kOffsetPitchFieldNumber = 5;
  inline float offset_pitch() const;
  inline void set_offset_pitch(float value);

  // required float init_v = 6;
  inline bool has_init_v() const;
  inline void clear_init_v();
  static const int kInitVFieldNumber = 6;
  inline float init_v() const;
  inline void set_init_v(float value);

  // required float init_k = 7;
  inline bool has_init_k() const;
  inline void clear_init_k();
  static const int kInitKFieldNumber = 7;
  inline float init_k() const;
  inline void set_init_k(float value);

  // @@protoc_insertion_point(class_scope:roborts_decision.GimbalControlParam)
 private:
  inline void set_has_offset_x();
  inline void clear_has_offset_x();
  inline void set_has_offset_y();
  inline void clear_has_offset_y();
  inline void set_has_offset_z();
  inline void clear_has_offset_z();
  inline void set_has_offset_yaw();
  inline void clear_has_offset_yaw();
  inline void set_has_offset_pitch();
  inline void clear_has_offset_pitch();
  inline void set_has_init_v();
  inline void clear_has_init_v();
  inline void set_has_init_k();
  inline void clear_has_init_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float offset_x_;
  float offset_y_;
  float offset_z_;
  float offset_yaw_;
  float offset_pitch_;
  float init_v_;
  float init_k_;
  friend void  protobuf_AddDesc_gimbal_5fcontrol_2eproto();
  friend void protobuf_AssignDesc_gimbal_5fcontrol_2eproto();
  friend void protobuf_ShutdownFile_gimbal_5fcontrol_2eproto();

  void InitAsDefaultInstance();
  static GimbalControlParam* default_instance_;
};
// ===================================================================


// ===================================================================

// GimbalControlParam

// required float offset_x = 1;
inline bool GimbalControlParam::has_offset_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GimbalControlParam::set_has_offset_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GimbalControlParam::clear_has_offset_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GimbalControlParam::clear_offset_x() {
  offset_x_ = 0;
  clear_has_offset_x();
}
inline float GimbalControlParam::offset_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.GimbalControlParam.offset_x)
  return offset_x_;
}
inline void GimbalControlParam::set_offset_x(float value) {
  set_has_offset_x();
  offset_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.GimbalControlParam.offset_x)
}

// required float offset_y = 2;
inline bool GimbalControlParam::has_offset_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GimbalControlParam::set_has_offset_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GimbalControlParam::clear_has_offset_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GimbalControlParam::clear_offset_y() {
  offset_y_ = 0;
  clear_has_offset_y();
}
inline float GimbalControlParam::offset_y() const {
  // @@protoc_insertion_point(field_get:roborts_decision.GimbalControlParam.offset_y)
  return offset_y_;
}
inline void GimbalControlParam::set_offset_y(float value) {
  set_has_offset_y();
  offset_y_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.GimbalControlParam.offset_y)
}

// required float offset_z = 3;
inline bool GimbalControlParam::has_offset_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GimbalControlParam::set_has_offset_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GimbalControlParam::clear_has_offset_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GimbalControlParam::clear_offset_z() {
  offset_z_ = 0;
  clear_has_offset_z();
}
inline float GimbalControlParam::offset_z() const {
  // @@protoc_insertion_point(field_get:roborts_decision.GimbalControlParam.offset_z)
  return offset_z_;
}
inline void GimbalControlParam::set_offset_z(float value) {
  set_has_offset_z();
  offset_z_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.GimbalControlParam.offset_z)
}

// required float offset_yaw = 4;
inline bool GimbalControlParam::has_offset_yaw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GimbalControlParam::set_has_offset_yaw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GimbalControlParam::clear_has_offset_yaw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GimbalControlParam::clear_offset_yaw() {
  offset_yaw_ = 0;
  clear_has_offset_yaw();
}
inline float GimbalControlParam::offset_yaw() const {
  // @@protoc_insertion_point(field_get:roborts_decision.GimbalControlParam.offset_yaw)
  return offset_yaw_;
}
inline void GimbalControlParam::set_offset_yaw(float value) {
  set_has_offset_yaw();
  offset_yaw_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.GimbalControlParam.offset_yaw)
}

// required float offset_pitch = 5;
inline bool GimbalControlParam::has_offset_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GimbalControlParam::set_has_offset_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GimbalControlParam::clear_has_offset_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GimbalControlParam::clear_offset_pitch() {
  offset_pitch_ = 0;
  clear_has_offset_pitch();
}
inline float GimbalControlParam::offset_pitch() const {
  // @@protoc_insertion_point(field_get:roborts_decision.GimbalControlParam.offset_pitch)
  return offset_pitch_;
}
inline void GimbalControlParam::set_offset_pitch(float value) {
  set_has_offset_pitch();
  offset_pitch_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.GimbalControlParam.offset_pitch)
}

// required float init_v = 6;
inline bool GimbalControlParam::has_init_v() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GimbalControlParam::set_has_init_v() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GimbalControlParam::clear_has_init_v() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GimbalControlParam::clear_init_v() {
  init_v_ = 0;
  clear_has_init_v();
}
inline float GimbalControlParam::init_v() const {
  // @@protoc_insertion_point(field_get:roborts_decision.GimbalControlParam.init_v)
  return init_v_;
}
inline void GimbalControlParam::set_init_v(float value) {
  set_has_init_v();
  init_v_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.GimbalControlParam.init_v)
}

// required float init_k = 7;
inline bool GimbalControlParam::has_init_k() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GimbalControlParam::set_has_init_k() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GimbalControlParam::clear_has_init_k() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GimbalControlParam::clear_init_k() {
  init_k_ = 0;
  clear_has_init_k();
}
inline float GimbalControlParam::init_k() const {
  // @@protoc_insertion_point(field_get:roborts_decision.GimbalControlParam.init_k)
  return init_k_;
}
inline void GimbalControlParam::set_init_k(float value) {
  set_has_init_k();
  init_k_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.GimbalControlParam.init_k)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gimbal_5fcontrol_2eproto__INCLUDED
